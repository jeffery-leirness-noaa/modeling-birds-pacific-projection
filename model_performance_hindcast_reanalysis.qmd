---
title: "Comparing results of models fitted with 'hindcast' vs. 'reanalysis' variables"
author: "Jeffery Leirness"
date: last-modified
format: pdf
toc: true
number-sections: true
execute:
  echo: false
# params:
#   data_species_info: "default value"
#   data_analysis_split_temporal: "default value"
#   models_to_run: "default value"
#   model_metrics: "default value"
#   model_summary_split_temporal_combined: "default value"
#   model_performance_split_temporal_combined: "default value"
---

```{r}
#| include: false

library(sf)
# data_species_info <- params$data_species_info
# data_analysis_split_temporal <- params$data_analysis_split_temporal
# models_to_run <- params$models_to_run
# model_metrics <- params$model_metrics
# model_summary_split_temporal_combined <- params$model_summary_split_temporal_combined
# model_performance_split_temporal_combined <- params$model_performance_split_temporal_combined
# targets::tar_load(c(data_species_info,
#                     data_analysis_split_temporal,
#                     models_to_run,
#                     model_metrics,
#                     model_summary_split_temporal_combined,
#                     model_performance_split_temporal_combined))
# targets::tar_load_globals()
# tar_load_azure_store("data_species_info")
# tar_load_azure_store("data_analysis_split_temporal")
# tar_load_azure_store("models_to_run")
# tar_load_azure_store("model_metrics")
# tar_load_azure_store("model_summary_split_temporal_combined")
# tar_load_azure_store("model_performance_split_temporal_combined")
data_species_info <- readRDS("data/data_species_info.rds")
data_analysis_split_temporal <- readRDS("data/data_analysis_split_temporal.rds")
models_to_run <- readRDS("data/models_to_run.rds")
model_metrics <- readRDS("data/model_metrics.rds")
model_summary_split_temporal_combined <- readRDS("data/model_summary_split_temporal_combined.rds")
model_performance_split_temporal_combined <- readRDS("data/model_performance_split_temporal_combined.rds")

model_summary <- list()
for (i in seq(along = model_summary_split_temporal_combined)) {
  model_summary_i <- model_summary_split_temporal_combined[[i]]
  model_summary[[i]] <- dplyr::slice(models_to_run, i) |>
    dplyr::select(!model_formula) |>
    dplyr::bind_cols(model_summary_i)
}
model_summary <- purrr::list_rbind(model_summary)

metrics <- list()
for (i in seq(along = model_performance_split_temporal_combined)) {
  metrics_i <- model_performance_split_temporal_combined[[i]]
  metrics[[i]] <- dplyr::slice(models_to_run, i) |>
    dplyr::select(!model_formula) |>
    dplyr::bind_cols(metrics_i)
}
metrics <- purrr::list_rbind(metrics) |> 
  dplyr::filter(!(.metric %in% c("mape", "mpe", "rpiq")))

best_models <- metrics |>
  dplyr::filter(.metric == "rmse") |> 
  dplyr::group_by(code, covariate_prefix) |>
  dplyr::summarise(mgcv_gamma = mgcv_gamma[which.min(.estimate)],
                   .estimate = min(.estimate))
best_model_summary <- dplyr::inner_join(model_summary, best_models)

best_metrics <- metrics |>
  dplyr::group_by(code, .metric) |>
  dplyr::summarise(min_estimate = min(.estimate),
                   min_covariate = covariate_prefix[which.min(.estimate)],
                   min_gamma = mgcv_gamma[which.min(.estimate)],
                   max_estimate = max(.estimate),
                   max_covariate = covariate_prefix[which.max(.estimate)],
                   max_gamma = mgcv_gamma[which.max(.estimate)]) |> 
  dplyr::mutate(
    best_estimate = dplyr::if_else(.metric %in% c("ccc", "iic", "rpd", "rsq", "rsq_trad"),
                                   max_estimate,
                                   min_estimate),
    best_covariate = dplyr::if_else(.metric %in% c("ccc", "iic", "rpd", "rsq", "rsq_trad"),
                                    max_covariate,
                                    min_covariate),
    best_gamma = dplyr::if_else(.metric %in% c("ccc", "iic", "rpd", "rsq", "rsq_trad"),
                                max_gamma,
                                min_gamma),
  )
```

## Overall summary

### Temporal data split

```{r}
dat1 <- data_analysis_split_temporal |>
  rsample::analysis() |>
  dplyr::mutate(set = "analysis")
dat2 <- data_analysis_split_temporal |>
  rsample::assessment() |>
  dplyr::mutate(set = "assessment")
dplyr::bind_rows(dat1, dat2) |>
  ggplot2::ggplot() +
  ggplot2::geom_sf() +
  ggplot2::facet_wrap(~ set)

data_analysis_split_temporal |>
  rsample::analysis() |>
  tibble::as_tibble() |>
  dplyr::mutate(year = lubridate::year(date)) |>
  janitor::tabyl(year) |>
  knitr::kable(digits = 3, caption = "Analysis set (first 85% of pre-2011 data)")

data_analysis_split_temporal |>
  rsample::assessment() |>
  tibble::as_tibble() |>
  dplyr::mutate(year = lubridate::year(date)) |>
  janitor::tabyl(year) |>
  knitr::kable(digits = 3, caption = "Assessment set (last 15% of pre-2011 data)")
```

### Summary of "best" models for each species

```{r}
janitor::tabyl(best_metrics, .metric, best_covariate) |>
  dplyr::mutate(reanalysis_prop = reanalysis / (hindcast + reanalysis)) |>
  dplyr::select(c(.metric, "reanalysis_prop")) |>
  knitr::kable(digits = 2, col.names = c("Metric", "Proportion (reanalysis)"),
               caption = "Proportion of 'best' models (as chosen by each metric) that utilized the reanalysis covariates")
```

### Variable 'importance'

```{r}
best_model_summary |>
  dplyr::filter(covariate_prefix == "reanalysis") |>
  ggplot2::ggplot(mapping = ggplot2::aes(x = term, y = p.value)) +
  ggplot2::geom_boxplot() +
  ggplot2::labs(x = "Model term",
                y = "p-value (Chi sq)",
                title = "Reanalysis") +
  ggplot2::guides(x = ggplot2::guide_axis(angle = 45))

best_model_summary |>
  dplyr::filter(covariate_prefix == "hindcast") |>
  ggplot2::ggplot(mapping = ggplot2::aes(x = term, y = p.value)) +
  ggplot2::geom_boxplot() +
  ggplot2::labs(x = "Model term",
                y = "p-value (Chi sq)",
                title = "Hindcast") +
  ggplot2::guides(x = ggplot2::guide_axis(angle = 45))
# metrics |>
#   dplyr::filter(.metric == met) |>
#   dplyr::group_by(code) |>
#   dplyr::summarise(min_rmse = min(.estimate),
#                    min_covariate = covariate_prefix[which.min(.estimate)],
#                    min_gamma = mgcv_gamma[which.min(.estimate)]) |>
#   janitor::tabyl(min_covariate)
# 
# metrics |>
#   dplyr::filter(.metric == met) |>
#   dplyr::group_by(code) |>
#   dplyr::summarise(min_rmse = min(.estimate),
#                    min_covariate = covariate_prefix[which.min(.estimate)],
#                    min_gamma = mgcv_gamma[which.min(.estimate)]) |>
#   janitor::tabyl(min_gamma)
# 
# metrics |>
#   dplyr::filter(.metric == met) |>
#   dplyr::group_by(code) |>
#   dplyr::summarise(min_rmse = min(.estimate),
#                    min_covariate = covariate_prefix[which.min(.estimate)],
#                    min_gamma = mgcv_gamma[which.min(.estimate)]) |>
#   janitor::tabyl(min_covariate, min_gamma)
```

## Species-specific summaries

```{r}
#| include: false

spp <- unique(models_to_run$code)
spp_nm <- dplyr::filter(data_species_info, tolower(code) %in% spp) |> 
  dplyr::pull(common_nm)

# plots
make_plot <- function(spec) {
  sp_nm <- dplyr::filter(data_species_info, tolower(code) == spec) |>
    dplyr::pull(common_nm)
  metrics |>
    dplyr::filter(code == spec) |> 
    ggplot2::ggplot(mapping = ggplot2::aes(mgcv_gamma, .estimate,
                                           group = covariate_prefix,
                                           color = covariate_prefix)) +
    ggplot2::geom_line() +
    ggplot2::facet_wrap(ggplot2::vars(.metric), scales = "free_y") +
    ggplot2::labs(color = NULL,
                  x = "{mgcv} gamma argument",
                  y = "Estimate",
                  title = sp_nm) +
    ggplot2::theme(legend.position = "bottom")
}
list_plot <- purrr::map(spp, make_plot)

# tables
make_table <- function(spec, covariate) {
  bms <- best_model_summary |>
    dplyr::filter(code == spec, covariate_prefix == covariate)
  dplyr::select(bms, term:p.value) |>
    dplyr::arrange(p.value) |>
    knitr::kable(caption = glue::glue("Model summary for {covariate} model with lowest RMSE (gamma = {unique(bms$mgcv_gamma)})"))
}
list_table_reanalysis <- purrr::map(spp, make_table, covariate = "reanalysis")
list_table_hindcast <- purrr::map(spp, make_table, covariate = "hindcast")

df <- tibble::tibble(sp = spp,
                     nm = spp_nm,
                     plots = list_plot,
                     tables_reanalysis = list_table_reanalysis,
                     tables_hindcast = list_table_hindcast)
```

```{r}
#| output: asis

res <- purrr::pmap_chr(df, \(sp, nm, plots, tables_reanalysis, tables_hindcast) {
  knitr::knit_child(text = c(
    "### `r nm`",
    "```{r}",
    "#| echo: false",
    "plots",
    "tables_reanalysis",
    "tables_hindcast",
    "```",
    ""), envir = environment(), quiet = TRUE)
})
cat(res, sep = "\n")
```
